{"remainingRequest":"/Users/brdnicolas/Desktop/DebateMe/front/node_modules/babel-loader/lib/index.js!/Users/brdnicolas/Desktop/DebateMe/front/node_modules/ts-loader/index.js??ref--14-2!/Users/brdnicolas/Desktop/DebateMe/front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/brdnicolas/Desktop/DebateMe/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brdnicolas/Desktop/DebateMe/front/src/components/admin/AddQuestion.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/brdnicolas/Desktop/DebateMe/front/src/components/admin/AddQuestion.vue","mtime":1597098079365},{"path":"/Users/brdnicolas/Desktop/DebateMe/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brdnicolas/Desktop/DebateMe/front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/brdnicolas/Desktop/DebateMe/front/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/brdnicolas/Desktop/DebateMe/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brdnicolas/Desktop/DebateMe/front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL2JyZG5pY29sYXMvRGVza3RvcC9EZWJhdGVNZS9mcm9udC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL1VzZXJzL2JyZG5pY29sYXMvRGVza3RvcC9EZWJhdGVNZS9mcm9udC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9Vc2Vycy9icmRuaWNvbGFzL0Rlc2t0b3AvRGViYXRlTWUvZnJvbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICIvVXNlcnMvYnJkbmljb2xhcy9EZXNrdG9wL0RlYmF0ZU1lL2Zyb250L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cyI7CmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSAiL1VzZXJzL2JyZG5pY29sYXMvRGVza3RvcC9EZWJhdGVNZS9mcm9udC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXIiOwppbXBvcnQgeyBfX2RlY29yYXRlIH0gZnJvbSAidHNsaWIiOyAvLyBAdHMtbm9jaGVjawoKaW1wb3J0IHsgQ29tcG9uZW50LCBWdWUgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJzsKaW1wb3J0IE1lbnUgZnJvbSAiQC9jb21wb25lbnRzL2FkbWluL01lbnUudnVlIjsKaW1wb3J0IEhlYWRlciBmcm9tICJAL2NvbXBvbmVudHMvbWluaS1jb21wb25lbnRzL2hlYWRlci52dWUiOwppbXBvcnQgbXlBUEkgZnJvbSAiQC9jb21wb25lbnRzL215QVBJIjsKaW1wb3J0IFN3YWwgZnJvbSAnc3dlZXRhbGVydDIvZGlzdC9zd2VldGFsZXJ0Mi5qcyc7Cgp2YXIgSGVsbG9Xb3JsZCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1Z1ZSkgewogIF9pbmhlcml0cyhIZWxsb1dvcmxkLCBfVnVlKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihIZWxsb1dvcmxkKTsKCiAgZnVuY3Rpb24gSGVsbG9Xb3JsZCgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGVsbG9Xb3JsZCk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLnRoZW1lcyA9IFtdOwogICAgX3RoaXMuc2VsZWN0ZWRUaGVtZSA9ICJub25lIjsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhIZWxsb1dvcmxkLCBbewogICAga2V5OiAibW91bnRlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgICAgdGhpcy5jaGVja0FkbWluKCk7CiAgICAgIHRoaXMuZ2V0VGhlbWVzKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2VsZWN0RmlsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2VsZWN0RmlsZSgpIHsKICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImZpbGVRdWVzdGlvbiIpLmNsaWNrKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0VGhlbWVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZ2V0VGhlbWVzID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciByZXA7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcmVwID0gbnVsbDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIG15QVBJLmdldCgidGhlbWVzLyIpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgIHJlcCA9IHJlc3BvbnNlLmRhdGE7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgaWYgKHJlcCkgewogICAgICAgICAgICAgICAgICB0aGlzLnRoZW1lcyA9IHJlcDsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIm9rIik7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBnZXRUaGVtZXMoKSB7CiAgICAgICAgcmV0dXJuIF9nZXRUaGVtZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGdldFRoZW1lczsKICAgIH0oKQogIH0sIHsKICAgIGtleTogIm5ld1F1ZXN0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfbmV3UXVlc3Rpb24gPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciB2YWx1ZVRpdGxlLCB2YWx1ZURvYywgdmFsdWVJbWcsIGRhdGEsIFRvYXN0LCByZXA7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHZhbHVlVGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidGl0bGVRdWVzdGlvbiIpOwogICAgICAgICAgICAgICAgdmFsdWVEb2MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZG9jUXVlc3Rpb24iKTsKICAgICAgICAgICAgICAgIHZhbHVlSW1nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImZpbGVRdWVzdGlvbiIpOwogICAgICAgICAgICAgICAgZGF0YSA9IG5ldyBGb3JtRGF0YSgpOwogICAgICAgICAgICAgICAgaWYgKHZhbHVlSW1nLmZpbGVzWzBdKSBkYXRhLmFwcGVuZCgnaW1hZ2UnLCB2YWx1ZUltZy5maWxlc1swXSk7CgogICAgICAgICAgICAgICAgaWYgKHZhbHVlVGl0bGUgJiYgdmFsdWVEb2MpIHsKICAgICAgICAgICAgICAgICAgZGF0YS5hcHBlbmQoJ3RpdGxlJywgdmFsdWVUaXRsZS52YWx1ZSk7CiAgICAgICAgICAgICAgICAgIGRhdGEuYXBwZW5kKCdkb2N1bWVudGF0aW9uJywgdmFsdWVEb2MudmFsdWUpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIFRvYXN0ID0gU3dhbC5taXhpbih7CiAgICAgICAgICAgICAgICAgIHRvYXN0OiB0cnVlLAogICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcC1lbmQnLAogICAgICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmVwID0gbnVsbDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICByZXR1cm4gbXlBUEkucG9zdCgidGhlbWVzLyIgKyB0aGlzLnNlbGVjdGVkVGhlbWUgKyAiL3F1ZXN0aW9ucyIsIHsKICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YQogICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgcmVwID0gcmVzcG9uc2UuZGF0YTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgaWYgKCFyZXApIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMzsKICAgICAgICAgICAgICAgIHJldHVybiBUb2FzdC5maXJlKHsKICAgICAgICAgICAgICAgICAgaWNvbjogJ3N1Y2Nlc3MnLAogICAgICAgICAgICAgICAgICB0aXRsZTogJ0xhIHF1ZXN0aW9uIGEgYmllbiDDqXTDqSBjcsOpw6llJwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgcmV0dXJuIFRvYXN0LmZpcmUoewogICAgICAgICAgICAgICAgICBpY29uOiAnZXJyb3InLAogICAgICAgICAgICAgICAgICB0aXRsZTogIkVycmV1ciBsb3JzIGRlIGxhIGNyw6lhdGlvbiBkZSBsYSBxdWVzdGlvbi4iCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMiwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIG5ld1F1ZXN0aW9uKCkgewogICAgICAgIHJldHVybiBfbmV3UXVlc3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG5ld1F1ZXN0aW9uOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiY2hlY2tBZG1pbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2NoZWNrQWRtaW4gPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgIHZhciByZXA7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJlcCA9IG51bGw7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gbXlBUEkuZ2V0KCJ1c2Vycy9tZS9wcm9maWxlIikudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgcmVwID0gcmVzcG9uc2UuZGF0YTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBpZiAocmVwKSB7CiAgICAgICAgICAgICAgICAgIGlmICghcmVwLmlzQWRtaW4pIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy8nOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBjaGVja0FkbWluKCkgewogICAgICAgIHJldHVybiBfY2hlY2tBZG1pbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gY2hlY2tBZG1pbjsKICAgIH0oKQogIH1dKTsKCiAgcmV0dXJuIEhlbGxvV29ybGQ7Cn0oVnVlKTsKCkhlbGxvV29ybGQgPSBfX2RlY29yYXRlKFtDb21wb25lbnQoewogIGNvbXBvbmVudHM6IHsKICAgIEhlYWRlcjogSGVhZGVyLAogICAgTWVudTogTWVudQogIH0KfSldLCBIZWxsb1dvcmxkKTsKZXhwb3J0IGRlZmF1bHQgSGVsbG9Xb3JsZDs="},{"version":3,"sources":["/Users/brdnicolas/Desktop/DebateMe/front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/brdnicolas/Desktop/DebateMe/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brdnicolas/Desktop/DebateMe/front/src/components/admin/AddQuestion.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// @ts-nocheck\nimport { Component, Vue } from 'vue-property-decorator';\nimport Menu from \"@/components/admin/Menu.vue\";\nimport Header from \"@/components/mini-components/header.vue\";\nimport myAPI from \"@/components/myAPI\";\nimport Swal from 'sweetalert2/dist/sweetalert2.js'\n\n@Component({\n    components: {\n        Header,\n        Menu\n    },\n})\n\nexport default class HelloWorld extends Vue {\n\n    mounted() {\n        this.checkAdmin();\n        this.getThemes();\n    }\n\n    themes: object;\n    selectedTheme: string;\n    constructor() {\n          super();\n          this.themes = [];\n          this.selectedTheme = \"none\"\n    }\n\n    selectFile(): void {\n        document.getElementById(\"fileQuestion\").click();\n    }\n\n    async getThemes(): Promise<void> {\n        let rep = null;\n        await myAPI.get(\"themes/\")\n        .then(function(response) {\n            rep = response.data;\n        });\n        if (rep) {\n            this.themes = rep;\n            console.log(\"ok\")\n            console.log(rep);\n        }\n    }\n\n    async newQuestion(): Promise<void> {\n        const valueTitle = document.getElementById(\"titleQuestion\") as HTMLElement;\n        const valueDoc = document.getElementById(\"docQuestion\") as HTMLElement;\n        const valueImg = document.getElementById(\"fileQuestion\") as HTMLElement;\n        const data = new FormData();\n\n        if (valueImg.files[0])\n          data.append('image', valueImg.files[0]);\n\n        if(valueTitle && valueDoc) {\n            data.append('title', valueTitle.value);\n            data.append('documentation', valueDoc.value);\n        }\n        const Toast = Swal.mixin({\n          toast: true,\n          position: 'top-end',\n          showConfirmButton: false,\n        });\n\n        let rep = null;\n        await myAPI.post(\"themes/\"+ this.selectedTheme +\"/questions\", {\n          data\n        })\n            .then(function(response) {\n              rep = response.data;\n            });\n        if (rep) {\n            await Toast.fire({\n              icon: 'success',\n              title: 'La question a bien été créée'\n            })\n        } else {\n            await Toast.fire({\n              icon: 'error',\n              title: \"Erreur lors de la création de la question.\"\n            })\n        }\n    }\n\n    async checkAdmin(): Promise<void> {\n        let rep = null;\n        await myAPI.get(\"users/me/profile\")\n        .then(function(response) {\n            rep = response.data;\n        });\n        if (rep) {\n            if( !(rep as Record<string,any>).isAdmin )\n                window.location.href = '/';\n        }\n    }\n\n\n}\n"],"sourceRoot":""}]}