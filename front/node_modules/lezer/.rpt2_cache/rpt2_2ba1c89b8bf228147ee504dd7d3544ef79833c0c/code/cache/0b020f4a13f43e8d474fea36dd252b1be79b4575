{"code":"import * as tslib_1 from \"tslib\";\nimport { TERM_TAGGED } from \"./term\";\nvar Tree = /** @class */ (function () {\n    function Tree(children, positions) {\n        this.children = children;\n        this.positions = positions;\n    }\n    Tree.prototype.toString = function (parser) {\n        return this.children.map(function (c) { return c.toString(parser); }).join();\n    };\n    Object.defineProperty(Tree.prototype, \"length\", {\n        get: function () {\n            var last = this.children.length - 1;\n            return last < 0 ? 0 : this.positions[last] + this.children[last].length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Tree.prototype.partial = function (start, end, offset, children, positions) {\n        for (var i = 0; i < this.children.length; i++) {\n            var from = this.positions[i];\n            if (from >= end)\n                break;\n            var child = this.children[i], to = from + child.length;\n            if (to > start)\n                child.partial(start - from, end - from, offset + from, children, positions);\n        }\n    };\n    Tree.prototype.unchanged = function (changes) {\n        if (changes.length == 0)\n            return this;\n        var children = [], positions = [];\n        for (var i = 0, pos = 0, off = 0;; i++) {\n            var next = i == changes.length ? null : changes[i];\n            var nextPos = next ? next.fromA : this.length;\n            if (nextPos > pos)\n                this.partial(pos, nextPos - 1 /* FIXME need a full token here */, off, children, positions);\n            if (!next)\n                break;\n            pos = next.toA;\n            off += (next.toB - next.fromB) - (next.toA - next.fromA);\n        }\n        return new Tree(children, positions);\n    };\n    Tree.prototype.cursor = function (parser) { return new NodeCursor(this, parser); };\n    Tree.empty = new Tree([], []);\n    return Tree;\n}());\nexport { Tree };\nvar Node = /** @class */ (function (_super) {\n    tslib_1.__extends(Node, _super);\n    function Node(tag, _length, children, positions) {\n        var _this = _super.call(this, children, positions) || this;\n        _this.tag = tag;\n        _this._length = _length;\n        return _this;\n    }\n    Object.defineProperty(Node.prototype, \"length\", {\n        get: function () { return this._length; } // Because super class already has a getter\n        ,\n        enumerable: true,\n        configurable: true\n    });\n    Node.prototype.toString = function (parser) {\n        var name = (this.tag & TERM_TAGGED) == 0 ? null : parser ? parser.getTag(this.tag) : this.tag;\n        var children = this.children.map(function (c) { return c.toString(parser); }).join();\n        return !name ? children : name + (children.length ? \"(\" + children + \")\" : \"\");\n    };\n    Node.prototype.partial = function (start, end, offset, children, positions) {\n        if (start <= 0 && end >= this.length) {\n            children.push(this);\n            positions.push(offset);\n        }\n        else {\n            _super.prototype.partial.call(this, start, end, offset, children, positions);\n        }\n    };\n    return Node;\n}(Tree));\nexport { Node };\n// Tree buffers contain type,start,end,childCount quads for each node.\n// The nodes are built in postfix order (with parent nodes being\n// written after child nodes), but converted to prefix order when\n// wrapped in a TreeBuffer.\nvar TreeBuffer = /** @class */ (function () {\n    function TreeBuffer(buffer) {\n        this.buffer = buffer;\n    }\n    Object.defineProperty(TreeBuffer.prototype, \"nodeCount\", {\n        get: function () { return this.buffer.length >> 2; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TreeBuffer.prototype, \"length\", {\n        get: function () { return this.buffer[this.buffer.length - 2]; },\n        enumerable: true,\n        configurable: true\n    });\n    TreeBuffer.prototype.toString = function (parser) {\n        var _this = this;\n        var pos = 0;\n        var next = function () {\n            var tag = _this.buffer[pos], count = _this.buffer[pos + 3];\n            pos += 4;\n            var children = \"\", end = pos + (count << 2);\n            while (pos < end)\n                children += (children ? \",\" : \"\") + next();\n            return (parser ? parser.getTag(tag) : tag) + (children ? \"(\" + children + \")\" : \"\");\n        };\n        var result = \"\";\n        while (pos < this.buffer.length)\n            result += (result ? \",\" : \"\") + next();\n        return result;\n    };\n    TreeBuffer.prototype.partial = function (start, end, offset, children, positions) {\n        if (start <= 0 && end >= this.length) {\n            children.push(this);\n            positions.push(offset);\n        }\n    };\n    TreeBuffer.prototype.unchanged = function (changes) {\n        return changes.length ? Tree.empty : this;\n    };\n    TreeBuffer.prototype.cursor = function (parser) { return new NodeCursor(this, parser); };\n    return TreeBuffer;\n}());\nexport { TreeBuffer };\nvar NodeCursor = /** @class */ (function () {\n    function NodeCursor(tree, parser) {\n        this.parser = parser;\n        this.trees = [];\n        this.offset = [0];\n        this.index = [0];\n        this.leaf = null;\n        this.leafOffset = 0;\n        this.leafIndex = 0;\n        if (tree instanceof Tree)\n            this.trees.push(tree);\n        else\n            this.leaf = tree;\n    }\n    NodeCursor.prototype.next = function () {\n        for (;;) {\n            if (this.leaf) {\n                var index_1 = this.leafIndex, buf = this.leaf.buffer;\n                if (index_1 == buf.length) {\n                    this.leaf = null;\n                    continue;\n                }\n                else {\n                    this.tag = this.parser.getTag(buf[index_1++]);\n                    this.start = this.leafOffset + buf[index_1++];\n                    this.end = this.leafOffset + buf[index_1++];\n                    this.leafIndex += 4;\n                    return true;\n                }\n            }\n            var last = this.trees.length - 1;\n            if (last < 0)\n                return false;\n            var top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.offset.pop();\n                this.index.pop();\n                continue;\n            }\n            var next = top.children[index];\n            var start = this.offset[last] + top.positions[index];\n            if (next instanceof TreeBuffer) {\n                this.leaf = next;\n                this.leafIndex = 0;\n                this.leafOffset = start;\n                this.index[last]++;\n            }\n            else {\n                this.index[last]++;\n                this.trees.push(next);\n                this.offset.push(start);\n                this.index.push(0);\n                if (next.tag & TERM_TAGGED) {\n                    this.tag = this.parser.getTag(next.tag);\n                    this.start = start;\n                    this.end = start + next.length;\n                    return true;\n                }\n            }\n        }\n    };\n    return NodeCursor;\n}());\nexport { NodeCursor };\n//# sourceMappingURL=tree.js.map","map":"{\"version\":3,\"file\":\"tree.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/tree.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/marijn/src/lezer/lezer/tree.d.ts","writeByteOrderMark":false,"text":"import { Parser } from \"./parse\";\nexport interface ChangedRange {\n    fromA: number;\n    toA: number;\n    fromB: number;\n    toB: number;\n}\nexport declare class Tree {\n    readonly children: (Node | TreeBuffer)[];\n    readonly positions: number[];\n    constructor(children: (Node | TreeBuffer)[], positions: number[]);\n    toString(parser?: Parser): string;\n    readonly length: number;\n    partial(start: number, end: number, offset: number, children: (Node | TreeBuffer)[], positions: number[]): void;\n    unchanged(changes: readonly ChangedRange[]): Tree;\n    static empty: Tree;\n    cursor(parser: Parser): NodeCursor;\n}\nexport declare type SyntaxTree = TreeBuffer | Tree;\nexport declare class Node extends Tree {\n    readonly tag: number;\n    private _length;\n    constructor(tag: number, _length: number, children: (Node | TreeBuffer)[], positions: number[]);\n    readonly length: number;\n    toString(parser?: Parser): string;\n    partial(start: number, end: number, offset: number, children: (Node | TreeBuffer)[], positions: number[]): void;\n}\nexport declare class TreeBuffer {\n    readonly buffer: Uint16Array;\n    constructor(buffer: Uint16Array);\n    readonly nodeCount: number;\n    readonly length: number;\n    toString(parser?: Parser): string;\n    partial(start: number, end: number, offset: number, children: (Node | TreeBuffer)[], positions: number[]): void;\n    unchanged(changes: readonly ChangedRange[]): Tree | this;\n    cursor(parser: Parser): NodeCursor;\n}\nexport declare class NodeCursor {\n    readonly parser: Parser;\n    trees: Tree[];\n    offset: number[];\n    index: number[];\n    leaf: TreeBuffer | null;\n    leafOffset: number;\n    leafIndex: number;\n    start: number;\n    end: number;\n    tag: string;\n    constructor(tree: SyntaxTree, parser: Parser);\n    next(): boolean;\n}\n"}}
