{"code":"// Shifts are encoded as negative state IDs, reduces as bitmasks with\n// the first 6 bits holding the depth of the reduce, and the bits\n// after that the term that's being reduced.\nexport var REDUCE_DEPTH_SIZE = 6, REDUCE_DEPTH_MASK = Math.pow(2, REDUCE_DEPTH_SIZE) - 1;\nvar ParseState = /** @class */ (function () {\n    function ParseState(id, actions, recover, defaultReduce, forcedReduce, tokenizers) {\n        this.id = id;\n        this.actions = actions;\n        this.recover = recover;\n        this.defaultReduce = defaultReduce;\n        this.forcedReduce = forcedReduce;\n        this.tokenizers = tokenizers;\n    }\n    ParseState.prototype.hasAction = function (terminal) {\n        return lookup(this.actions, terminal) != 0;\n    };\n    ParseState.prototype.anyReduce = function () {\n        if (this.defaultReduce > 0)\n            return this.defaultReduce;\n        for (var i = 0; i < this.actions.length; i += 2) {\n            var action = this.actions[i + 1];\n            if (action > 0)\n                return action;\n        }\n        return 0;\n    };\n    ParseState.prototype.getRecover = function (terminal) { return lookup(this.recover, terminal); };\n    return ParseState;\n}());\nexport { ParseState };\nfunction lookup(actions, term) {\n    for (var i = 0; i < actions.length; i += 2)\n        if (actions[i] == term)\n            return actions[i + 1];\n    return 0;\n}\n//# sourceMappingURL=state.js.map","map":"{\"version\":3,\"file\":\"state.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/state.ts\"],\"names\":[],\"mappings\":\"AAEA,qEAAqE;AACrE,iEAAiE;AACjE,4CAA4C;AAC5C,MAAM,CAAC,IAAM,iBAAiB,GAAG,CAAC,EAAE,iBAAiB,GAAG,SAAA,CAAC,EAAE,iBAAiB,CAAA,GAAG,CAAC,CAAA;AAEhF;IACE,oBAAqB,EAAU,EACV,OAA0B,EAC1B,OAA0B,EAC1B,aAAqB,EACrB,YAAoB,EACpB,UAAgC;QALhC,OAAE,GAAF,EAAE,CAAQ;QACV,YAAO,GAAP,OAAO,CAAmB;QAC1B,YAAO,GAAP,OAAO,CAAmB;QAC1B,kBAAa,GAAb,aAAa,CAAQ;QACrB,iBAAY,GAAZ,YAAY,CAAQ;QACpB,eAAU,GAAV,UAAU,CAAsB;IAAG,CAAC;IAEzD,8BAAS,GAAT,UAAU,QAAgB;QACxB,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAA;IAC5C,CAAC;IAED,8BAAS,GAAT;QACE,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC;YAAE,OAAO,IAAI,CAAC,aAAa,CAAA;QACrD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YAC/C,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;YAChC,IAAI,MAAM,GAAG,CAAC;gBAAE,OAAO,MAAM,CAAA;SAC9B;QACD,OAAO,CAAC,CAAA;IACV,CAAC;IACD,+BAAU,GAAV,UAAW,QAAgB,IAAI,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAA,CAAC,CAAC;IACxE,iBAAC;AAAD,CAAC,AArBD,IAqBC;;AAED,SAAS,MAAM,CAAC,OAA0B,EAAE,IAAY;IACtD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,IAAG,CAAC;QAAE,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI;YAAE,OAAO,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;IACxF,OAAO,CAAC,CAAA;AACV,CAAC\"}","dts":{"name":"/home/marijn/src/lezer/lezer/state.d.ts","writeByteOrderMark":false,"text":"import { Tokenizer } from \"./token\";\nexport declare const REDUCE_DEPTH_SIZE = 6, REDUCE_DEPTH_MASK: number;\nexport declare class ParseState {\n    readonly id: number;\n    readonly actions: readonly number[];\n    readonly recover: readonly number[];\n    readonly defaultReduce: number;\n    readonly forcedReduce: number;\n    readonly tokenizers: readonly Tokenizer[];\n    constructor(id: number, actions: readonly number[], recover: readonly number[], defaultReduce: number, forcedReduce: number, tokenizers: readonly Tokenizer[]);\n    hasAction(terminal: number): boolean;\n    anyReduce(): number;\n    getRecover(terminal: number): number;\n}\n"}}
