{"code":"import { ANON_TERM, FIRST_REPEAT_TERM, TERM_ERR, REDUCE_DEPTH_MASK, REDUCE_DEPTH_SIZE } from \"./parser\";\nimport { Node, Tree, TreeBuffer, MAX_BUFFER_LENGTH, MAX_BUFFER_SIZE } from \"./tree\";\nvar VALUE_INDEX_SIZE = 15, VALUE_INDEX_MASK = Math.pow(2, VALUE_INDEX_SIZE) - 1;\nvar BADNESS_DELETE = 100, BADNESS_RECOVER = 100;\nexport var BADNESS_STABILIZING = 50, BADNESS_WILD = 150; // Limits in between which stacks are less agressively pruned\n// (FIXME: this will go out of date before I know it, revisit at some\n// point)\n//\n// Badness is a measure of how off-the-rails a given parse is. It is\n// bumped when a recovery strategy is applied, and then reduced (by\n// multiplication with a constant < 1) for every successful (real)\n// token shifted.\n//\n// Stacks with a low badness are relatively credible parses that have\n// shift matching the input in their recent history. Stacks with a\n// high badness are deeply in the weeds and likely wrong. For each of\n// these, we prune agressively by dropping stacks when another stack\n// at the same position is looking better.\n//\n// For those in the BADNESS_STABILIZING - BADNESS_WILD range, we\n// assume that they are in the process of trying to recover and allow\n// a bunch of them to continue alongside each other to see which one\n// works out better.\n//\n// Stacks with the same low badness score are likely to be valid GLR\n// parsing branches, so in that case it's often a good idea to let\n// both continue.\n//\n// When a stack fails to find an advancing action, recovery is only\n// applied when its badness is < BADNESS_WILD, or no better parse\n// exists at that point.\nvar Stack = /** @class */ (function () {\n    function Stack(parser, \n    // Holds state, pos, value stack pos (15 bits array index, 15 bits buffer index) triplets for all but the top state\n    stack, state, pos, values, valueInfo, badness) {\n        this.parser = parser;\n        this.stack = stack;\n        this.state = state;\n        this.pos = pos;\n        this.values = values;\n        this.valueInfo = valueInfo;\n        this.badness = badness;\n    }\n    Stack.prototype.toString = function () {\n        var _this = this;\n        return \"[\" + this.stack.filter(function (_, i) { return i % 3 == 0; }).concat(this.state.id).join(\",\") + \"] \" +\n            this.values.map(function (v, i) { return Array.isArray(v) ? Tree.fromBuffer(v, 0) : v; }).map(function (t) { return t.toString(_this.parser); }).join(\",\");\n    };\n    Stack.start = function (parser) {\n        return new Stack(parser, [], parser.states[0], 0, [], [], 0);\n    };\n    Stack.prototype.reduceValue = function (stackIndex, stackOffset, start) {\n        var children = [], positions = [];\n        for (var i = stackIndex; i < this.values.length; i++) {\n            var value = this.values[i], valueInfo = this.valueInfo[i];\n            if (Array.isArray(value)) {\n                var startIndex = i == stackIndex ? stackOffset << 2 : 0;\n                if (startIndex < value.length)\n                    TreeBuffer.build(value, startIndex, start, children, positions);\n                if (startIndex > 0)\n                    value.length = startIndex;\n            }\n            else {\n                children.push(value);\n                positions.push(valueInfo - start);\n            }\n        }\n        var newLen = stackIndex + (stackOffset ? 1 : 0);\n        if (this.values.length > newLen)\n            this.values.length = this.valueInfo.length = newLen;\n        return new Tree(children, positions);\n    };\n    Stack.prototype.pushState = function (state, start) {\n        var valueIndex;\n        if (this.values.length > 0) {\n            var last = this.values[this.values.length - 1];\n            valueIndex = last instanceof Node ? this.values.length : this.values.length - 1 + ((last.length >> 2) << VALUE_INDEX_SIZE);\n        }\n        else {\n            valueIndex = 0;\n        }\n        this.stack.push(this.state.id, start, valueIndex);\n        this.state = state;\n    };\n    Stack.prototype.reduce = function (action) {\n        var depth = action & REDUCE_DEPTH_MASK, tag = action >> REDUCE_DEPTH_SIZE;\n        if (depth == 0) {\n            this.pushState(this.parser.states[this.state.getGoto(tag)], this.pos);\n            return;\n        }\n        var base = this.stack.length - ((depth - 1) * 3);\n        var start = this.stack[base - 2];\n        if ((tag & ANON_TERM) == 0) {\n            var valueIndex = this.stack[base - 1];\n            var stackIndex = valueIndex & VALUE_INDEX_MASK, stackOffset = valueIndex >> VALUE_INDEX_SIZE;\n            var top_1 = this.values.length - 1;\n            var length_1 = this.pos - start, pushed = false;\n            push: if (length_1 <= MAX_BUFFER_LENGTH && stackIndex >= top_1) {\n                var needNew = stackIndex > top_1, childCount = 0, buffer = void 0;\n                if (!needNew) {\n                    buffer = this.values[top_1];\n                    if (!Array.isArray(buffer))\n                        break push;\n                    childCount = (buffer.length >> 2) - stackOffset;\n                    if (buffer.length >= MAX_BUFFER_SIZE) {\n                        if (childCount)\n                            break push;\n                        needNew = true;\n                    }\n                }\n                if (needNew) {\n                    this.values.push(buffer = []);\n                    this.valueInfo.push(0);\n                }\n                buffer.push(tag, start, this.pos, childCount);\n                pushed = true;\n            }\n            if (!pushed) {\n                this.values.push(this.reduceValue(stackIndex, stackOffset, start).toNode(tag, length_1));\n                this.valueInfo.push(start);\n            }\n        }\n        else if (tag >= FIRST_REPEAT_TERM && this.pos - start > MAX_BUFFER_LENGTH) {\n            var valueIndex = this.stack[base - 1];\n            var balanced = this.reduceValue(valueIndex & VALUE_INDEX_MASK, valueIndex >> VALUE_INDEX_SIZE, start)\n                .balance(this.parser.getRepeat(tag));\n            this.values.push(balanced);\n            this.valueInfo.push(start);\n        }\n        var baseState = this.parser.states[this.stack[base - 3]];\n        this.state = this.parser.states[baseState.getGoto(tag)];\n        if (depth > 1)\n            this.stack.length = base;\n    };\n    Stack.prototype.shiftValue = function (term, start, end, childCount) {\n        if (childCount === void 0) { childCount = 0; }\n        var last;\n        if (this.values.length == 0 ||\n            !Array.isArray(last = this.values[this.values.length - 1]) ||\n            last.length >= MAX_BUFFER_SIZE) {\n            this.values.push(last = []);\n            this.valueInfo.push(0);\n        }\n        if (term == TERM_ERR && last.length && last[last.length - 4] == term &&\n            (start == end || last[last.length - 2] >= start))\n            return;\n        last.push(term, start, end, childCount);\n    };\n    Stack.prototype.apply = function (action, next, nextStart, nextEnd, skipped) {\n        if (action >= 0) {\n            this.reduce(action);\n        }\n        else { // Shift\n            this.shiftSkipped(skipped);\n            this.pushState(this.parser.states[-action], nextStart);\n            this.pos = nextEnd;\n            if ((next & ANON_TERM) == 0)\n                this.shiftValue(next, nextStart, nextEnd);\n            this.badness = (this.badness >> 1) + (this.badness >> 2); // (* 0.75)\n        }\n    };\n    Stack.prototype.useCached = function (value, start, next) {\n        this.pushState(next, start);\n        this.values.push(value);\n        this.valueInfo.push(start);\n        this.pos = start + value.length;\n        this.badness >> 1; // FIXME\n    };\n    Stack.prototype.split = function () {\n        return new Stack(this.parser, this.stack.slice(), this.state, this.pos, this.values.map(function (v) { return Array.isArray(v) ? v.slice() : v; }), this.valueInfo.slice(), this.badness);\n    };\n    Stack.prototype.shiftSkipped = function (skipped) {\n        for (var i = 0; i < skipped.length; i += 3)\n            this.shiftValue(skipped[i + 2], skipped[i], skipped[i + 1]);\n    };\n    Stack.prototype.recoverByDelete = function (next, nextStart, nextEnd, skipped) {\n        this.shiftSkipped(skipped);\n        if ((next & ANON_TERM) == 0)\n            this.shiftValue(next, nextStart, nextEnd);\n        this.shiftValue(TERM_ERR, nextStart, nextEnd, (next & ANON_TERM) ? 0 : 1);\n        this.pos = nextEnd;\n        this.badness += BADNESS_DELETE;\n    };\n    Stack.prototype.canRecover = function (next) {\n        // Scan for a state that has either a direct action or a recovery\n        // action for next, without actually building up a new stack\n        // FIXME this can continue infinitely without the i < 100 limit, should build up a set of visited states\n        for (var top_2 = this.state, rest = this.stack, offset = rest.length, i = 0; i < 100; i++) {\n            if (top_2.hasAction(next) || top_2.getRecover(next) != 0)\n                return true;\n            // Find a way to reduce from here\n            var reduce = top_2.anyReduce();\n            if (reduce == 0 && (reduce = top_2.defaultReduce) < 0)\n                return false;\n            var term = reduce >> REDUCE_DEPTH_SIZE, depth = reduce & REDUCE_DEPTH_MASK;\n            if (depth == 0) {\n                if (rest == this.stack)\n                    rest = rest.slice();\n                rest.push(top_2.id, 0, 0);\n                offset += 3;\n            }\n            else {\n                offset -= (depth - 1) * 3;\n            }\n            var goto = this.parser.states[rest[offset - 3]].getGoto(term);\n            if (goto < 0)\n                return false;\n            top_2 = this.parser.states[goto];\n        }\n        return false;\n    };\n    Stack.prototype.recoverByInsert = function (next, nextStart, nextEnd) {\n        if (!this.canRecover(next))\n            return null;\n        // Now that we know there's a recovery to be found, run the\n        // reduces again, the expensive way, updating the stack\n        var result = this.split();\n        result.badness += BADNESS_RECOVER;\n        for (;;) {\n            for (;;) {\n                if (result.state.hasAction(next))\n                    return result;\n                var recover = result.state.getRecover(next);\n                if (!recover)\n                    break;\n                var pos = result.pos;\n                result.pushState(this.parser.states[recover], pos);\n                result.shiftValue(TERM_ERR, pos, pos);\n            }\n            var reduce = result.state.anyReduce();\n            if (reduce == 0) {\n                // Force a reduce using this state's default reduce\n                result.shiftValue(TERM_ERR, result.pos, result.pos);\n                reduce = result.state.defaultReduce;\n            }\n            result.reduce(reduce);\n        }\n    };\n    Stack.prototype.toTree = function () {\n        return this.reduceValue(0, 0, 0);\n    };\n    Stack.prototype.compare = function (other) {\n        return this.pos - other.pos || this.badness - other.badness;\n    };\n    Stack.prototype.put = function (parses, strict) {\n        if (strict === void 0) { strict = this.badness < BADNESS_STABILIZING || this.badness > BADNESS_WILD; }\n        for (var i = 0; i < parses.length; i++) {\n            var other = parses[i];\n            if ((strict || other.state == this.state) && other.pos == this.pos) {\n                var diff = this.badness - other.badness || (this.badness < BADNESS_STABILIZING ? 0 : this.stack.length - other.stack.length);\n                if (diff < 0) {\n                    parses[i] = this;\n                    return true;\n                }\n                else if (diff > 0)\n                    return false;\n            }\n        }\n        // Binary heap add\n        var index = parses.push(this) - 1;\n        while (index > 0) {\n            var parentIndex = index >> 1, parent_1 = parses[parentIndex];\n            if (this.compare(parent_1) >= 0)\n                break;\n            parses[index] = parent_1;\n            parses[parentIndex] = this;\n            index = parentIndex;\n        }\n        return true;\n    };\n    Stack.take = function (parses) {\n        // Binary heap pop\n        var elt = parses[0], replacement = parses.pop();\n        if (parses.length == 0)\n            return elt;\n        parses[0] = replacement;\n        for (var index = 0;;) {\n            var childIndex = (index << 1) + 1;\n            if (childIndex >= parses.length)\n                break;\n            var child = parses[childIndex];\n            if (childIndex + 1 < parses.length && child.compare(parses[childIndex + 1]) >= 0) {\n                child = parses[childIndex + 1];\n                childIndex++;\n            }\n            if (replacement.compare(child) < 0)\n                break;\n            parses[childIndex] = replacement;\n            parses[index] = child;\n            index = childIndex;\n        }\n        return elt;\n    };\n    return Stack;\n}());\nexport { Stack };\n//# sourceMappingURL=stack.js.map","map":"{\"version\":3,\"file\":\"stack.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/stack.ts\"],\"names\":[],\"mappings\":\"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\"}"}
