{"code":"import * as tslib_1 from \"tslib\";\nimport { ANON_TERM } from \"./parser\";\nexport var DEFAULT_BUFFER_LENGTH = 2048;\nexport var MAX_BUFFER_LENGTH = DEFAULT_BUFFER_LENGTH;\nexport function setBufferLength(len) { MAX_BUFFER_LENGTH = len; }\n// The size after which a buffer must be split on the next shift or\n// childless reduce (to avoid overflowing the value index bits)\nexport var MAX_BUFFER_SIZE = Math.pow(2, 16) - 1;\nvar BALANCE_BRANCH_FACTOR = 5;\nvar Tree = /** @class */ (function () {\n    function Tree(children, positions) {\n        this.children = children;\n        this.positions = positions;\n    }\n    Tree.prototype.toString = function (parser) {\n        return this.children.map(function (c) { return c.toString(parser); }).join();\n    };\n    Tree.prototype.toNode = function (tag, length) {\n        return new Node(tag, length, this.children, this.positions);\n    };\n    Object.defineProperty(Tree.prototype, \"length\", {\n        get: function () {\n            var last = this.children.length - 1;\n            return last < 0 ? 0 : this.positions[last] + this.children[last].length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // FIXME this should unwrap nodes with the matching tag to prevent repeated reuse from creating an unbalanced tree\n    Tree.prototype.balanceRange = function (tag, from, to) {\n        var start = this.positions[from], length = (this.positions[to - 1] + this.children[to - 1].length) - start;\n        if (from == to - 1 && start == 0) {\n            var first = this.children[from];\n            if (first instanceof Node)\n                return first;\n        }\n        var children = [], positions = [];\n        if (length <= MAX_BUFFER_LENGTH) {\n            for (var i = from; i < to; i++) {\n                var child = this.children[i];\n                children.push(child);\n                positions.push(this.positions[i] - start);\n            }\n        }\n        else {\n            var maxChild = Math.max(MAX_BUFFER_LENGTH, Math.ceil(length / BALANCE_BRANCH_FACTOR));\n            for (var i = from; i < to;) {\n                var groupFrom = i, groupStart = this.positions[i];\n                i++;\n                for (; i < to; i++) {\n                    var nextEnd = this.positions[i] + this.children[i].length;\n                    if (nextEnd - groupStart > maxChild)\n                        break;\n                }\n                if (i == groupFrom + 1) {\n                    var only = this.children[groupFrom];\n                    if (!(only instanceof Node) || only.tag != tag)\n                        only = new Node(tag, only.length, [only], [0]);\n                    children.push(only);\n                }\n                else {\n                    children.push(this.balanceRange(tag, groupFrom, i));\n                }\n                positions.push(groupStart - start);\n            }\n        }\n        return new Node(tag, length, children, positions);\n    };\n    Tree.prototype.balance = function (tag) {\n        return this.balanceRange(tag, 0, this.children.length);\n    };\n    Tree.prototype.partial = function (start, end, offset, children, positions) {\n        for (var i = 0; i < this.children.length; i++) {\n            var from = this.positions[i];\n            if (from >= end)\n                break;\n            var child = this.children[i], to = from + child.length;\n            if (to > start)\n                child.partial(start - from, end - from, offset + from, children, positions);\n        }\n    };\n    Tree.prototype.unchanged = function (changes) {\n        if (changes.length == 0)\n            return this;\n        var children = [], positions = [];\n        for (var i = 0, pos = 0, off = 0;; i++) {\n            var next = i == changes.length ? null : changes[i];\n            var nextPos = next ? next.fromA : this.length;\n            if (nextPos > pos)\n                this.partial(pos, nextPos - 1 /* FIXME need a full token here */, off, children, positions);\n            if (!next)\n                break;\n            pos = next.toA;\n            off += (next.toB - next.fromB) - (next.toA - next.fromA);\n        }\n        return new Tree(children, positions);\n    };\n    Tree.fromBuffer = function (buffer, start) {\n        var children = [], positions = [];\n        TreeBuffer.build(buffer, 0, start, children, positions);\n        return new Tree(children, positions);\n    };\n    Tree.prototype.cursor = function (parser) { return new NodeCursor(this, parser); };\n    Tree.empty = new Tree([], []);\n    return Tree;\n}());\nexport { Tree };\nvar Node = /** @class */ (function (_super) {\n    tslib_1.__extends(Node, _super);\n    function Node(tag, _length, children, positions) {\n        var _this = _super.call(this, children, positions) || this;\n        _this.tag = tag;\n        _this._length = _length;\n        return _this;\n    }\n    Object.defineProperty(Node.prototype, \"length\", {\n        get: function () { return this._length; } // Because super class already has a getter\n        ,\n        enumerable: true,\n        configurable: true\n    });\n    Node.prototype.toString = function (parser) {\n        var name = (this.tag & ANON_TERM) ? null : parser ? parser.getTag(this.tag) : this.tag;\n        var children = this.children.map(function (c) { return c.toString(parser); }).join();\n        return !name ? children : name + (children.length ? \"(\" + children + \")\" : \"\");\n    };\n    Node.prototype.partial = function (start, end, offset, children, positions) {\n        if (start <= 0 && end >= this.length) {\n            children.push(this);\n            positions.push(offset);\n        }\n        else {\n            _super.prototype.partial.call(this, start, end, offset, children, positions);\n        }\n    };\n    return Node;\n}(Tree));\nexport { Node };\n// Tree buffers contain type,start,end,childCount quads for each node.\n// The nodes are built in postfix order (with parent nodes being\n// written after child nodes), but converted to prefix order when\n// wrapped in a TreeBuffer.\nvar TreeBuffer = /** @class */ (function () {\n    function TreeBuffer(buffer) {\n        this.buffer = buffer;\n    }\n    Object.defineProperty(TreeBuffer.prototype, \"nodeCount\", {\n        get: function () { return this.buffer.length >> 2; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TreeBuffer.prototype, \"length\", {\n        get: function () { return this.buffer[this.buffer.length - 2]; },\n        enumerable: true,\n        configurable: true\n    });\n    TreeBuffer.copy = function (source, startIndex, endIndex, startOffset) {\n        var buffer = new Uint16Array(endIndex - startIndex);\n        var i = buffer.length, pos = endIndex;\n        function build() {\n            var count = source[--pos], to = source[--pos], from = source[--pos], tag = source[--pos];\n            var toPos = pos - (count << 2);\n            while (pos > toPos)\n                build();\n            buffer[--i] = count;\n            buffer[--i] = to - startOffset;\n            buffer[--i] = from - startOffset;\n            buffer[--i] = tag;\n        }\n        while (pos > startIndex)\n            build();\n        return new TreeBuffer(buffer);\n    };\n    TreeBuffer.build = function (source, startIndex, startOffset, children, positions) {\n        var startI = children.length;\n        for (var pos = source.length; pos > startIndex;) {\n            var partIndex = pos, partOffset = void 0, partEnd = source[pos - 2];\n            for (;;) {\n                var count = source[partIndex - 1], newIndex = partIndex - 4 - (count << 2);\n                var start = source[partIndex - 3];\n                if ((newIndex < startIndex || partEnd - start > MAX_BUFFER_LENGTH) && partIndex < pos)\n                    break;\n                partOffset = start;\n                partIndex = newIndex;\n            }\n            children.push(TreeBuffer.copy(source, partIndex, pos, partOffset));\n            positions.push(partOffset - startOffset);\n            pos = partIndex;\n        }\n        // The above loop adds the new children in inverse order, to this reverses them\n        for (var i = startI, j = children.length - 1; j > i; i++, j--) {\n            var tmp = children[i];\n            children[i] = children[j];\n            children[j] = tmp;\n            var tmp2 = positions[i];\n            positions[i] = positions[j];\n            positions[j] = tmp2;\n        }\n    };\n    TreeBuffer.prototype.toString = function (parser) {\n        var _this = this;\n        var pos = 0;\n        var next = function () {\n            var tag = _this.buffer[pos], count = _this.buffer[pos + 3];\n            pos += 4;\n            var children = \"\", end = pos + (count << 2);\n            while (pos < end)\n                children += (children ? \",\" : \"\") + next();\n            return (parser ? parser.getTag(tag) : tag) + (children ? \"(\" + children + \")\" : \"\");\n        };\n        var result = \"\";\n        while (pos < this.buffer.length)\n            result += (result ? \",\" : \"\") + next();\n        return result;\n    };\n    TreeBuffer.prototype.partial = function (start, end, offset, children, positions) {\n        if (start <= 0 && end >= this.length) {\n            children.push(this);\n            positions.push(offset);\n        }\n    };\n    TreeBuffer.prototype.unchanged = function (changes) {\n        return changes.length ? Tree.empty : this;\n    };\n    TreeBuffer.prototype.cursor = function (parser) { return new NodeCursor(this, parser); };\n    return TreeBuffer;\n}());\nexport { TreeBuffer };\nvar NodeCursor = /** @class */ (function () {\n    function NodeCursor(tree, parser) {\n        this.parser = parser;\n        this.trees = [];\n        this.offset = [0];\n        this.index = [0];\n        this.leaf = null;\n        this.leafOffset = 0;\n        this.leafIndex = 0;\n        if (tree instanceof Tree)\n            this.trees.push(tree);\n        else\n            this.leaf = tree;\n    }\n    NodeCursor.prototype.next = function () {\n        for (;;) {\n            if (this.leaf) {\n                var index_1 = this.leafIndex, buf = this.leaf.buffer;\n                if (index_1 == buf.length) {\n                    this.leaf = null;\n                    continue;\n                }\n                else {\n                    this.tag = this.parser.getTag(buf[index_1++]);\n                    this.start = this.leafOffset + buf[index_1++];\n                    this.end = this.leafOffset + buf[index_1++];\n                    this.leafIndex += 4;\n                    return true;\n                }\n            }\n            var last = this.trees.length - 1;\n            if (last < 0)\n                return false;\n            var top_1 = this.trees[last], index = this.index[last];\n            if (index == top_1.children.length) {\n                this.trees.pop();\n                this.offset.pop();\n                this.index.pop();\n                continue;\n            }\n            var next = top_1.children[index];\n            var start = this.offset[last] + top_1.positions[index];\n            if (next instanceof TreeBuffer) {\n                this.leaf = next;\n                this.leafIndex = 0;\n                this.leafOffset = start;\n                this.index[last]++;\n            }\n            else {\n                this.index[last]++;\n                this.trees.push(next);\n                this.offset.push(start);\n                this.index.push(0);\n                if ((next.tag & ANON_TERM) == 0) {\n                    this.tag = this.parser.getTag(next.tag);\n                    this.start = start;\n                    this.end = start + next.length;\n                    return true;\n                }\n            }\n        }\n    };\n    return NodeCursor;\n}());\nexport { NodeCursor };\n//# sourceMappingURL=tree.js.map","map":"{\"version\":3,\"file\":\"tree.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/tree.ts\"],\"names\":[],\"mappings\":\"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\"}"}
