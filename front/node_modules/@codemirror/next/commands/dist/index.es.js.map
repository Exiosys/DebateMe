{"version":3,"file":"index.es.js","sources":["../src/commands.ts"],"sourcesContent":["import {EditorState, StateCommand, EditorSelection, SelectionRange, Transaction} from \"../../state\"\nimport {EditorView, Command} from \"../../view\"\n\nfunction moveSelection(view: EditorView, dir: \"left\" | \"right\" | \"forward\" | \"backward\",\n                       granularity: \"character\" | \"word\" | \"line\" | \"lineboundary\"): boolean {\n  let transaction = view.state.t().forEachRange(range => {\n    if (!range.empty && granularity != \"lineboundary\")\n      return new SelectionRange(dir == \"left\" || dir == \"backward\" ? range.from : range.to)\n    return new SelectionRange(view.movePos(range.head, dir, granularity, \"move\"))\n  })\n  if (transaction.selection.eq(view.state.selection)) return false\n  if (granularity == \"line\") transaction.annotate(Transaction.preserveGoalColumn, true)\n  view.dispatch(transaction.scrollIntoView())\n  return true\n}\n\n/// Move the selection one character to the left (which is backward in\n/// left-to-right text, forward in right-to-left text).\nexport const moveCharLeft: Command = view => moveSelection(view, \"left\", \"character\")\n/// Move the selection one character to the right.\nexport const moveCharRight: Command = view => moveSelection(view, \"right\", \"character\")\n\n/// Move the selection one word to the left.\nexport const moveWordLeft: Command = view => moveSelection(view, \"left\", \"word\")\n/// Move the selection one word to the right.\nexport const moveWordRight: Command = view => moveSelection(view, \"right\", \"word\")\n\n/// Move the selection one line up.\nexport const moveLineUp: Command = view => moveSelection(view, \"backward\", \"line\")\n/// Move the selection one line down.\nexport const moveLineDown: Command = view => moveSelection(view, \"forward\", \"line\")\n\n/// Move the selection to the start of the line.\nexport const moveLineStart: Command = view => moveSelection(view, \"backward\", \"lineboundary\")\n/// Move the selection to the end of the line.\nexport const moveLineEnd: Command = view => moveSelection(view, \"forward\", \"lineboundary\")\n\nfunction extendSelection(view: EditorView, dir: \"left\" | \"right\" | \"forward\" | \"backward\",\n                         granularity: \"character\" | \"word\" | \"line\" | \"lineboundary\"): boolean {\n  let transaction = view.state.t().forEachRange(range => {\n    return new SelectionRange(range.anchor, view.movePos(range.head, dir, granularity, \"extend\"))\n  })\n  if (transaction.selection.eq(view.state.selection)) return false\n  if (granularity == \"line\") transaction.annotate(Transaction.preserveGoalColumn, true)\n  view.dispatch(transaction.scrollIntoView())\n  return true\n}\n\n/// Move the selection head one character to the left, while leaving\n/// the anchor in place.\nexport const extendCharLeft: Command = view => extendSelection(view, \"left\", \"character\")\n/// Move the selection head one character to the right.\nexport const extendCharRight: Command = view => extendSelection(view, \"right\", \"character\")\n\n/// Move the selection head one word to the left.\nexport const extendWordLeft: Command = view => extendSelection(view, \"left\", \"word\")\n/// Move the selection head one word to the right.\nexport const extendWordRight: Command = view => extendSelection(view, \"right\", \"word\")\n\n/// Move the selection head one line up.\nexport const extendLineUp: Command = view => extendSelection(view, \"backward\", \"line\")\n/// Move the selection head one line down.\nexport const extendLineDown: Command = view => extendSelection(view, \"forward\", \"line\")\n\n/// Move the selection head to the start of the line.\nexport const extendLineStart: Command = view => extendSelection(view, \"backward\", \"lineboundary\")\n/// Move the selection head to the end of the line.\nexport const extendLineEnd: Command = view => extendSelection(view, \"forward\", \"lineboundary\")\n\n/// Move the selection to the start of the document.\nexport const selectDocStart: StateCommand = ({state, dispatch}) => {\n  dispatch(state.t().setSelection(EditorSelection.single(0)).scrollIntoView())\n  return true\n}\n\n/// Move the selection to the end of the document.\nexport const selectDocEnd: StateCommand = ({state, dispatch}) => {\n  dispatch(state.t().setSelection(EditorSelection.single(state.doc.length)).scrollIntoView())\n  return true\n}\n\n/// Select the entire document.\nexport const selectAll: StateCommand = ({state, dispatch}) => {\n  dispatch(state.t().setSelection(EditorSelection.single(0, state.doc.length)))\n  return true\n}\n\nfunction deleteText(view: EditorView, dir: \"forward\" | \"backward\") {\n  let transaction = view.state.t().forEachRange((range, transaction) => {\n    let {from, to} = range\n    if (from == to) {\n      let target = view.movePos(range.head, dir, \"character\", \"move\")\n      from = Math.min(from, target); to = Math.max(to, target)\n    }\n    if (from == to) return range\n    transaction.replace(from, to, \"\")\n    return new SelectionRange(from)\n  })\n  if (!transaction.docChanged) return false\n\n  view.dispatch(transaction.scrollIntoView())\n  return true\n}\n\n/// Delete the character before the cursor (which is the one to left\n/// in left-to-right text, but the one to the right in right-to-left\n/// text).\nexport const deleteCharBackward: Command = view => deleteText(view, \"backward\")\n/// Delete the character after the cursor.\nexport const deleteCharForward: Command = view => deleteText(view, \"forward\")\n\n// FIXME support indenting by tab, configurable indent units\n\nfunction space(n: number) {\n  let result = \"\"\n  for (let i = 0; i < n; i++) result += \" \"\n  return result\n}\n\nfunction getIndentation(state: EditorState, pos: number): number {\n  for (let f of state.facet(EditorState.indentation)) {\n    let result = f(state, pos)\n    if (result > -1) return result\n  }\n  return -1\n}\n\n/// Replace the selection with a newline and indent the newly created\n/// line(s).\nexport const insertNewlineAndIndent: StateCommand = ({state, dispatch}): boolean => {\n  let i = 0, indentation = state.selection.ranges.map(r => {\n    let indent = getIndentation(state, r.from)\n    return indent > -1 ? indent : /^\\s*/.exec(state.doc.lineAt(r.from).slice(0, 50))![0].length\n  })\n  dispatch(state.t().forEachRange(({from, to}, tr) => {\n    let indent = indentation[i++], line = tr.doc.lineAt(to)\n    while (to < line.end && /s/.test(line.slice(to - line.start, to + 1 - line.start))) to++\n    tr.replace(from, to, [\"\", space(indent)])\n    return new SelectionRange(from + indent + 1)\n  }).scrollIntoView())\n  return true\n}\n\n/// Auto-indent the selected lines. This uses the [indentation\n/// behavor](#state.EditorState^indentation) as source.\nexport const indentSelection: StateCommand = ({state, dispatch}): boolean => {\n  // FIXME this will base all indentation on the same state, which is\n  // wrong (indentation looks at the indent of previous lines, which may\n  // be changed).\n  let lastLine = -1, positions = []\n  for (let range of state.selection.ranges) {\n    for (let {start, end} = state.doc.lineAt(range.from);;) {\n      if (start != lastLine) {\n        lastLine = start\n        let indent = getIndentation(state, start), current\n        if (indent > -1 &&\n            indent != (current = /^\\s*/.exec(state.doc.slice(start, Math.min(end, start + 100)))![0].length))\n          positions.push({pos: start, current, indent})\n      }\n      if (end + 1 > range.to) break\n      ;({start, end} = state.doc.lineAt(end + 1))\n    }\n  }\n  if (positions.length > 0) {\n    let tr = state.t()\n    for (let {pos, current, indent} of positions) {\n      let start = tr.changes.mapPos(pos)\n      tr.replace(start, start + current, space(indent))\n    }\n    dispatch(tr)\n  }\n  return true\n}\n\n/// The default keymap for Linux/Windows/non-Mac platforms. Binds the\n/// arrows for cursor motion, shift-arrow for selection extension,\n/// ctrl-arrows for by-word motion, home/end for line start/end,\n/// ctrl-home/end for document start/end, ctrl-a to select all,\n/// backspace/delete for deletion, and enter for newline-and-indent.\nexport const pcBaseKeymap: {[key: string]: Command} = {\n  \"ArrowLeft\": moveCharLeft,\n  \"ArrowRight\": moveCharRight,\n  \"Shift-ArrowLeft\": extendCharLeft,\n  \"Shift-ArrowRight\": extendCharRight,\n  \"Mod-ArrowLeft\": moveWordLeft,\n  \"Mod-ArrowRight\": moveWordRight,\n  \"Shift-Mod-ArrowLeft\": extendWordLeft,\n  \"Shift-Mod-ArrowRight\": extendWordRight,\n  \"ArrowUp\": moveLineUp,\n  \"ArrowDown\": moveLineDown,\n  \"Shift-ArrowUp\": extendLineUp,\n  \"Shift-ArrowDown\": extendLineDown,\n  \"Home\": moveLineStart,\n  \"End\": moveLineEnd,\n  \"Shift-Home\": extendLineStart,\n  \"Shift-End\": extendLineEnd,\n  \"Mod-Home\": selectDocStart,\n  \"Mod-End\": selectDocEnd,\n  \"Mod-a\": selectAll,\n  \"Backspace\": deleteCharBackward,\n  \"Delete\": deleteCharForward,\n  \"Enter\": insertNewlineAndIndent\n}\n\n/// The default keymap for Mac platforms. Includes the bindings from\n/// the [PC keymap](#commands.pcBaseKeymap) (using Cmd instead of\n/// Ctrl), and adds Mac-specific default bindings.\nexport const macBaseKeymap: {[key: string]: Command} = {\n  \"Control-b\": moveCharLeft,\n  \"Control-f\": moveCharRight,\n  \"Shift-Control-b\": extendCharLeft,\n  \"Shift-Control-f\": extendCharRight,\n  \"Control-p\": moveLineUp,\n  \"Control-n\": moveLineDown,\n  \"Shift-Control-p\": extendLineUp,\n  \"Shift-Control-n\": extendLineDown,\n  \"Control-a\": moveLineStart,\n  \"Control-e\": moveLineEnd,\n  \"Shift-Control-a\": extendLineStart,\n  \"Shift-Control-e\": extendLineEnd,\n  \"Cmd-ArrowUp\": selectDocStart,\n  \"Cmd-ArrowDown\": selectDocEnd,\n  \"Control-d\": deleteCharForward,\n  \"Control-h\": deleteCharBackward\n}\nfor (let key in pcBaseKeymap) macBaseKeymap[key] = pcBaseKeymap[key]\n\ndeclare const os: any\nconst mac = typeof navigator != \"undefined\" ? /Mac/.test(navigator.platform)\n          : typeof os != \"undefined\" ? os.platform() == \"darwin\" : false\n\n/// The default keymap for the current platform.\nexport const baseKeymap = mac ? macBaseKeymap : pcBaseKeymap\n"],"names":[],"mappings":"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"}