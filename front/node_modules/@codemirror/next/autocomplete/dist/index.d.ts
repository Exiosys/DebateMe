import { EditorView } from "../../view";
import { EditorState, Extension } from "../../state";
export interface AutocompleteData {
    completeAt: (state: EditorState, pos: number) => CompletionResult | Promise<CompletionResult>;
}
export interface CompletionResult {
    items: readonly Completion[];
}
export interface Completion {
    label: string;
    start: number;
    end: number;
    apply?: string | ((view: EditorView) => void);
}
export declare function completeFromSyntax(state: EditorState, pos: number): CompletionResult | Promise<CompletionResult>;
export declare function sortAndFilterCompletion(substr: string, items: ReadonlyArray<Completion>): Completion[];
export declare function autocomplete(config?: Partial<AutocompleteData>): Extension;
export declare function startCompletion(view: EditorView): boolean;
//# sourceMappingURL=index.d.ts.map