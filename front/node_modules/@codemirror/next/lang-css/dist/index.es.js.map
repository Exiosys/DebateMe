{"version":3,"file":"index.es.js","sources":["../src/css.ts"],"sourcesContent":["import {parser} from \"lezer-css\"\nimport {Subtree} from \"lezer-tree\"\nimport {LezerSyntax, continuedIndent, indentNodeProp, foldNodeProp} from \"../../syntax\"\nimport {styleTags} from \"../../highlight\"\n\n/// A syntax provider based on the [Lezer CSS\n/// parser](https://github.com/lezer-parser/css), extended with\n/// highlighting and indentation information.\nexport const cssSyntax = new LezerSyntax(parser.withProps(\n  indentNodeProp.add({\n    Declaration: continuedIndent()\n  }),\n  foldNodeProp.add({\n    Block(subtree: Subtree) { return {from: subtree.start + 1, to: subtree.end - 1} }\n  }),\n  styleTags({\n    \"import charset namespace keyframes\": \"keyword definition\",\n    \"media supports\": \"keyword control\",\n    \"from to\": \"keyword\",\n    NamespaceName: \"namespace\",\n    KeyframeName: \"labelName\",\n    TagName: \"typeName\",\n    ClassName: \"className\",\n    PseudoClassName: \"className constant\",\n    not: \"operatorKeyword\",\n    IdName: \"labelName\",\n    AttributeName: \"propertyName\",\n    NumberLiteral: \"number\",\n    PropertyName: \"propertyName\",\n    KeywordQuery: \"keyword\",\n    FeatureName: \"propertyName\",\n    UnaryQueryOp: \"operatorKeyword\",\n    callee: \"keyword\",\n    ValueName: \"atom\",\n    CallTag: \"atom\",\n    Callee: \"variableName\",\n    Unit: \"unit\",\n    \"UniversalSelector NestingSelector\": \"operator definition\",\n    AtKeyword: \"keyword\",\n    MatchOp: \"compareOperator\",\n    \"ChildOp SiblingOp, LogicOp\": \"logicOperator\",\n    BinOp: \"arithmeticOperator\",\n    Important: \"modifier\",\n    Comment: \"blockComment\",\n    ParenthesizedContent: \"name#2\",\n    ColorLiteral: \"color\",\n    StringLiteral: \"string\",\n    \":\": \"punctuation definition\",\n    \"PseudoOp #\": \"derefOperator\",\n    \"; ,\": \"separator\",\n    \"( )\": \"paren\",\n    \"[ ]\": \"squareBracket\",\n    \"{ }\": \"brace\"\n  })\n))\n\n/// Returns an extension that installs the CSS syntax provider.\nexport function css() { return cssSyntax.extension }\n"],"names":[],"mappings":";;;;AAKA;;;AAGA,MAAa,SAAS,GAAG,IAAI,WAAW,CAAC,MAAM,CAAC,SAAS,CACvD,cAAc,CAAC,GAAG,CAAC;IACjB,WAAW,EAAE,eAAe,EAAE;CAC/B,CAAC,EACF,YAAY,CAAC,GAAG,CAAC;IACf,KAAK,CAAC,OAAgB,IAAI,OAAO,EAAC,IAAI,EAAE,OAAO,CAAC,KAAK,GAAG,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,GAAG,GAAG,CAAC,EAAC,CAAA,EAAE;CAClF,CAAC,EACF,SAAS,CAAC;IACR,oCAAoC,EAAE,oBAAoB;IAC1D,gBAAgB,EAAE,iBAAiB;IACnC,SAAS,EAAE,SAAS;IACpB,aAAa,EAAE,WAAW;IAC1B,YAAY,EAAE,WAAW;IACzB,OAAO,EAAE,UAAU;IACnB,SAAS,EAAE,WAAW;IACtB,eAAe,EAAE,oBAAoB;IACrC,GAAG,EAAE,iBAAiB;IACtB,MAAM,EAAE,WAAW;IACnB,aAAa,EAAE,cAAc;IAC7B,aAAa,EAAE,QAAQ;IACvB,YAAY,EAAE,cAAc;IAC5B,YAAY,EAAE,SAAS;IACvB,WAAW,EAAE,cAAc;IAC3B,YAAY,EAAE,iBAAiB;IAC/B,MAAM,EAAE,SAAS;IACjB,SAAS,EAAE,MAAM;IACjB,OAAO,EAAE,MAAM;IACf,MAAM,EAAE,cAAc;IACtB,IAAI,EAAE,MAAM;IACZ,mCAAmC,EAAE,qBAAqB;IAC1D,SAAS,EAAE,SAAS;IACpB,OAAO,EAAE,iBAAiB;IAC1B,4BAA4B,EAAE,eAAe;IAC7C,KAAK,EAAE,oBAAoB;IAC3B,SAAS,EAAE,UAAU;IACrB,OAAO,EAAE,cAAc;IACvB,oBAAoB,EAAE,QAAQ;IAC9B,YAAY,EAAE,OAAO;IACrB,aAAa,EAAE,QAAQ;IACvB,GAAG,EAAE,wBAAwB;IAC7B,YAAY,EAAE,eAAe;IAC7B,KAAK,EAAE,WAAW;IAClB,KAAK,EAAE,OAAO;IACd,KAAK,EAAE,eAAe;IACtB,KAAK,EAAE,OAAO;CACf,CAAC,CACH,CAAC,CAAA;;AAGF,SAAgB,GAAG,KAAK,OAAO,SAAS,CAAC,SAAS,CAAA,EAAE;;;;"}