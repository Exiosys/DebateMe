import { Parser, ParseContext } from "lezer";
import { Tree } from "lezer-tree";
import { Text } from "../../text";
import { EditorState, StateField, Transaction, Syntax, Extension, Annotation } from "../../state";
export declare class LezerSyntax implements Syntax {
    readonly parser: Parser;
    readonly field: StateField<SyntaxState>;
    readonly extension: Extension;
    constructor(parser: Parser);
    getTree(state: EditorState): Tree;
    parsePos(state: EditorState): number;
    ensureTree(state: EditorState, upto: number, timeout?: number): Tree | null;
    get docNodeType(): import("lezer-tree").NodeType;
    languageDataAt<Interface = any>(state: EditorState, pos: number): Interface;
}
declare class SyntaxState {
    tree: Tree;
    upto: number;
    updatedTree: Tree;
    parse: ParseContext | null;
    constructor(tree: Tree, upto: number);
    static advance(tree: Tree, parser: Parser, doc: Text): SyntaxState;
    apply(tr: Transaction, parser: Parser, annotation: Annotation<SyntaxState>): SyntaxState;
    startParse(parser: Parser, doc: Text): void;
    stopParse(tree?: Tree | null, upto?: number): Tree;
}
export {};
//# sourceMappingURL=syntax.d.ts.map