import { Line } from "../../text";
import { NodeProp, Subtree } from "lezer-tree";
import { EditorState, Syntax } from "../../state";
export declare const indentNodeProp: NodeProp<(context: IndentContext) => number>;
export declare function syntaxIndentation(syntax: Syntax): import("../../state/dist").Extension;
export declare class IndentContext {
    readonly state: EditorState;
    readonly pos: number;
    readonly node: Subtree;
    constructor(state: EditorState, pos: number, node: Subtree);
    get unit(): number;
    get textAfter(): string;
    countColumn(line: string, pos: number): number;
    lineIndent(line: Line): number;
    get baseIndent(): number;
    column(pos: number): number;
}
export declare function delimitedIndent({ closing, align, units }: {
    closing: string;
    align?: boolean;
    units?: number;
}): (context: IndentContext) => number;
export declare const flatIndent: (context: IndentContext) => number;
export declare function continuedIndent({ except, units }?: {
    except?: RegExp;
    units?: number;
}): (context: IndentContext) => number;
//# sourceMappingURL=indent.d.ts.map