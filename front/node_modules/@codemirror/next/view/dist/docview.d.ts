import { ContentView, ChildCursor, DOMPos } from "./contentview";
import { BlockView } from "./blockview";
import { Viewport } from "./viewstate";
import { DecorationSet } from "./decoration";
import { Rect } from "./dom";
import { ViewUpdate } from "./extension";
import { EditorView } from "./editorview";
import { ChangedRange } from "../../state";
export declare class DocView extends ContentView {
    readonly view: EditorView;
    children: BlockView[];
    viewports: Viewport[];
    compositionDeco: DecorationSet;
    decorations: readonly DecorationSet[];
    selectionDirty: any;
    minWidth: number;
    minWidthFrom: number;
    minWidthTo: number;
    impreciseAnchor: DOMPos | null;
    impreciseHead: DOMPos | null;
    dom: HTMLElement;
    get root(): DocumentOrShadowRoot;
    get editorView(): EditorView;
    get length(): number;
    constructor(view: EditorView);
    update(update: ViewUpdate): boolean;
    private updateInner;
    private updateChildren;
    private replaceRange;
    updateSelection(force?: boolean): void;
    nearest(dom: Node): ContentView | null;
    posFromDOM(node: Node, offset: number): number;
    domAtPos(pos: number): DOMPos;
    coordsAt(pos: number): Rect | null;
    measureVisibleLineHeights(): number[];
    measureTextSize(): {
        lineHeight: number;
        charWidth: number;
    };
    clearSelectionDirty(): void;
    setSelectionDirty(): void;
    childCursor(pos?: number): ChildCursor;
    computeBlockGapDeco(): DecorationSet;
    updateDeco(): DecorationSet[];
    scrollPosIntoView(pos: number): void;
}
export declare function computeCompositionDeco(view: EditorView, changes: readonly ChangedRange[]): DecorationSet;
export declare function findChangedDeco(a: readonly DecorationSet[], b: readonly DecorationSet[], diff: readonly ChangedRange[], length: number): number[];
//# sourceMappingURL=docview.d.ts.map