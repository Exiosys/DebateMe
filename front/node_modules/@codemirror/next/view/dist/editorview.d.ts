import { EditorState, Transaction, Extension } from "../../state";
import { StyleModule, Style } from "style-mod";
import { DocView } from "./docview";
import { InputState, MouseSelectionUpdate } from "./input";
import { Rect } from "./dom";
import { BlockInfo } from "./heightmap";
import { ViewState } from "./viewstate";
import { ViewUpdate, ViewPlugin, PluginField, MeasureRequest } from "./extension";
import { DOMObserver } from "./domobserver";
import { Attrs } from "./attributes";
export interface EditorConfig {
    state?: EditorState;
    root?: Document | ShadowRoot;
    dispatch?: (tr: Transaction) => void;
}
export declare const enum UpdateState {
    Idle = 0,
    Measuring = 1,
    Updating = 2
}
export declare class EditorView {
    get state(): EditorState;
    get viewport(): {
        from: number;
        to: number;
    };
    get visibleRanges(): readonly {
        from: number;
        to: number;
    }[];
    readonly dispatch: (tr: Transaction) => void;
    readonly root: DocumentOrShadowRoot;
    readonly dom: HTMLElement;
    readonly scrollDOM: HTMLElement;
    readonly contentDOM: HTMLElement;
    inputState: InputState;
    readonly viewState: ViewState;
    readonly docView: DocView;
    private plugins;
    private editorAttrs;
    private contentAttrs;
    private styleModules;
    updateState: UpdateState;
    observer: DOMObserver;
    measureScheduled: number;
    measureRequests: MeasureRequest<any>[];
    constructor(config?: EditorConfig);
    update(transactions: Transaction[]): void;
    updatePlugins(update: ViewUpdate): void;
    measure(): void;
    private updateAttrs;
    private mountStyles;
    phrase(phrase: string): string;
    domAtPos(pos: number): {
        node: Node;
        offset: number;
    };
    posAtDOM(node: Node, offset?: number): number;
    private readMeasured;
    requestMeasure<T>(request?: MeasureRequest<T>): void;
    pluginField<T>(field: PluginField<T>): readonly T[];
    plugin<T>(plugin: ViewPlugin<T>): T | null;
    blockAtHeight(height: number, editorTop?: number): BlockInfo;
    lineAtHeight(height: number, editorTop?: number): BlockInfo;
    lineAt(pos: number, editorTop?: number): BlockInfo;
    viewportLines(f: (height: BlockInfo) => void, editorTop?: number): void;
    get contentHeight(): number;
    movePos(start: number, direction: "forward" | "backward" | "left" | "right", granularity?: "character" | "word" | "line" | "lineboundary", action?: "move" | "extend"): number;
    posAtCoords(coords: {
        x: number;
        y: number;
    }): number;
    coordsAtPos(pos: number): Rect | null;
    get defaultCharacterWidth(): number;
    get defaultLineHeight(): number;
    get textDirection(): "ltr" | "rtl";
    startMouseSelection(event: MouseEvent, update: MouseSelectionUpdate): void;
    get hasFocus(): boolean;
    focus(): void;
    destroy(): void;
    static plugin: import("../../state/dist").Facet<ViewPlugin<any>, readonly ViewPlugin<any>[]>;
    static styleModule: import("../../state/dist").Facet<StyleModule<{}>, readonly StyleModule<{}>[]>;
    static domEventHandlers: import("../../state/dist").Facet<{
        [key: string]: (view: EditorView, event: any) => boolean;
    }, readonly {
        [key: string]: (view: EditorView, event: any) => boolean;
    }[]>;
    static dragMovesSelection: import("../../state/dist").Facet<(event: MouseEvent) => boolean, readonly ((event: MouseEvent) => boolean)[]>;
    static clickAddsSelectionRange: import("../../state/dist").Facet<(event: MouseEvent) => boolean, readonly ((event: MouseEvent) => boolean)[]>;
    static decorations: import("../../state/dist").Facet<import("./decoration").DecorationSet, readonly import("./decoration").DecorationSet[]>;
    static theme(spec: {
        [name: string]: Style;
    }): Extension;
    static baseTheme(spec: {
        [name: string]: Style;
    }): Extension;
    static phrases: import("../../state/dist").Facet<{
        [key: string]: string;
    }, readonly {
        [key: string]: string;
    }[]>;
    static contentAttributes: import("../../state/dist").Facet<Attrs, Attrs>;
    static editorAttributes: import("../../state/dist").Facet<Attrs, Attrs>;
}
//# sourceMappingURL=editorview.d.ts.map