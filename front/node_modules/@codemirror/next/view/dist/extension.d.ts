import { EditorState, Transaction, ChangeSet, Facet, Extension } from "../../state";
import { StyleModule } from "style-mod";
import { DecorationSet } from "./decoration";
import { EditorView } from "./editorview";
import { Attrs } from "./attributes";
import { Rect } from "./dom";
export declare type Command = (target: EditorView) => boolean;
export declare const domEventHandlers: Facet<{
    [key: string]: (view: EditorView, event: any) => boolean;
}, readonly {
    [key: string]: (view: EditorView, event: any) => boolean;
}[]>;
export declare const clickAddsSelectionRange: Facet<(event: MouseEvent) => boolean, readonly ((event: MouseEvent) => boolean)[]>;
export declare const dragMovesSelection: Facet<(event: MouseEvent) => boolean, readonly ((event: MouseEvent) => boolean)[]>;
export interface PluginValue {
    update?(_update: ViewUpdate): void;
    destroy?(): void;
}
export declare class PluginField<T> {
    static define<T>(): PluginField<T>;
    static scrollMargins: PluginField<Partial<Rect> | null>;
}
export declare const viewPlugin: Facet<ViewPlugin<any>, readonly ViewPlugin<any>[]>;
export declare class ViewPlugin<T extends PluginValue> {
    readonly id: number;
    readonly create: (view: EditorView) => T;
    readonly fields: readonly {
        field: PluginField<any>;
        get: (plugin: T) => any;
    }[];
    extension: Extension;
    private constructor();
    static define<T extends PluginValue>(create: (view: EditorView) => T): ViewPlugin<T>;
    static fromClass<T extends PluginValue>(cls: {
        new (view: EditorView): T;
    }): ViewPlugin<T>;
    provide<V>(field: PluginField<V>, get: (plugin: T) => V): ViewPlugin<T>;
    decorations<V extends {
        decorations: DecorationSet;
    } & PluginValue>(this: ViewPlugin<V>): ViewPlugin<T>;
    decorations(get: (plugin: T) => DecorationSet): ViewPlugin<T>;
}
export declare const pluginDecorations: PluginField<DecorationSet>;
export declare class PluginInstance {
    readonly value: PluginValue;
    readonly spec: ViewPlugin<any>;
    updateFunc: (update: ViewUpdate) => void;
    constructor(value: PluginValue, spec: ViewPlugin<any>);
    static create(spec: ViewPlugin<any>, view: EditorView): PluginInstance;
    takeField<T>(type: PluginField<T>, target: T[]): void;
    update(update: ViewUpdate): PluginInstance;
    destroy(): void;
    static dummy: PluginInstance;
}
export interface MeasureRequest<T> {
    key?: any;
    read(view: EditorView): T;
    write(measure: T, view: EditorView): void;
}
export declare const editorAttributes: Facet<Attrs, Attrs>;
export declare const contentAttributes: Facet<Attrs, Attrs>;
export declare const decorations: Facet<DecorationSet, readonly DecorationSet[]>;
export declare const styleModule: Facet<StyleModule<{}>, readonly StyleModule<{}>[]>;
export declare const phrases: Facet<{
    [key: string]: string;
}, readonly {
    [key: string]: string;
}[]>;
export declare const enum UpdateFlag {
    Focus = 1,
    Height = 2,
    Viewport = 4,
    Oracle = 8,
    LineGaps = 16
}
export declare class ViewUpdate {
    readonly view: EditorView;
    readonly state: EditorState;
    readonly transactions: readonly Transaction[];
    readonly changes: ChangeSet;
    readonly prevState: EditorState;
    flags: number;
    constructor(view: EditorView, state: EditorState, transactions?: readonly Transaction[]);
    get viewportChanged(): boolean;
    get heightChanged(): boolean;
    get focusChanged(): boolean;
    get docChanged(): boolean;
    get selectionSet(): boolean;
    get empty(): boolean;
}
//# sourceMappingURL=extension.d.ts.map