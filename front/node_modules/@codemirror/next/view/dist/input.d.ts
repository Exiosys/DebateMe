import { EditorSelection, SelectionRange, ChangeSet } from "../../state";
import { EditorView } from "./editorview";
import { ViewUpdate } from "./extension";
export declare class InputState {
    lastKeyCode: number;
    lastKeyTime: number;
    lastSelectionOrigin: string | null;
    lastSelectionTime: number;
    registeredEvents: string[];
    customHandlers: readonly {
        [key: string]: (view: EditorView, event: any) => boolean;
    }[];
    composing: boolean;
    goalColumns: {
        pos: number;
        column: number;
    }[];
    mouseSelection: MouseSelection | null;
    notifiedFocused: boolean;
    setSelectionOrigin(origin: string): void;
    constructor(view: EditorView);
    ensureHandlers(view: EditorView): void;
    runCustomHandlers(type: string, view: EditorView, event: Event): boolean;
    startMouseSelection(view: EditorView, event: MouseEvent, update: MouseSelectionUpdate): void;
    update(update: ViewUpdate): void;
    destroy(): void;
}
export declare type MouseSelectionUpdate = (view: EditorView, startSelection: EditorSelection, startPos: number, startBias: -1 | 1, curPos: number, curBias: -1 | 1, extend: boolean, multiple: boolean) => EditorSelection;
declare class MouseSelection {
    private inputState;
    private view;
    private update;
    dragging: null | false | SelectionRange;
    startSelection: EditorSelection;
    startPos: number;
    startBias: -1 | 1;
    curPos: number;
    curBias: -1 | 1;
    extend: boolean;
    multiple: boolean;
    dragMove: boolean;
    constructor(inputState: InputState, view: EditorView, event: MouseEvent, update: MouseSelectionUpdate);
    queryPos(event: MouseEvent): {
        pos: number;
        bias: 1 | -1;
    };
    move(event: MouseEvent): void;
    up(event: MouseEvent): void;
    destroy(): void;
    select(): void;
    map(changes: ChangeSet): void;
}
export {};
//# sourceMappingURL=input.d.ts.map