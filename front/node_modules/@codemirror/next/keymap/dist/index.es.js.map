{"version":3,"file":"index.es.js","sources":["../src/keymap.ts"],"sourcesContent":["import {base, keyName} from \"w3c-keyname\"\nimport {EditorView, Command} from \"../../view\"\n\n/// A keymap associates key names with\n/// [command](#view.Command)-style functions.\n///\n/// Key names may be strings like `\"Shift-Ctrl-Enter\"`â€”a key identifier\n/// prefixed with zero or more modifiers. Key identifiers are based on\n/// the strings that can appear in\n/// [`KeyEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).\n/// Use lowercase letters to refer to letter keys (or uppercase letters\n/// if you want shift to be held). You may use `\"Space\"` as an alias\n/// for the `\" \"` name.\n///\n/// Modifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or\n/// `a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or\n/// `Meta-`) are recognized.\n///\n/// You can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on\n/// other platforms. So `Mod-b` is `Ctrl-b` on Linux but `Cmd-b` on\n/// macOS.\nexport type Keymap = {[key: string]: Command | undefined}\n\nconst mac = typeof navigator != \"undefined\" ? /Mac/.test(navigator.platform) : false\n\nfunction normalizeKeyName(name: string): string {\n  const parts = name.split(/-(?!$)/)\n  let result = parts[parts.length - 1]\n  if (result == \"Space\") result = \" \"\n  let alt, ctrl, shift, meta\n  for (let i = 0; i < parts.length - 1; ++i) {\n    const mod = parts[i]\n    if (/^(cmd|meta|m)$/i.test(mod)) meta = true\n    else if (/^a(lt)?$/i.test(mod)) alt = true\n    else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true\n    else if (/^s(hift)?$/i.test(mod)) shift = true\n    else if (/^mod$/i.test(mod)) { if (mac) meta = true; else ctrl = true }\n    else throw new Error(\"Unrecognized modifier name: \" + mod)\n  }\n  if (alt) result = \"Alt-\" + result\n  if (ctrl) result = \"Ctrl-\" + result\n  if (meta) result = \"Meta-\" + result\n  if (shift) result = \"Shift-\" + result\n  return result\n}\n\nfunction modifiers(name: string, event: KeyboardEvent, shift: boolean) {\n  if (event.altKey) name = \"Alt-\" + name\n  if (event.ctrlKey) name = \"Ctrl-\" + name\n  if (event.metaKey) name = \"Meta-\" + name\n  if (shift !== false && event.shiftKey) name = \"Shift-\" + name\n  return name\n}\n\n/// Create a view extension that registers a keymap.\n///\n/// You can add multiple keymap behaviors to an editor. Their\n/// priorities determine their precedence (the ones specified early or\n/// with high priority get to dispatch first). When a handler has\n/// returned `true` for a given key, no further handlers are called.\nexport const keymap = (map: Keymap) => {\n  let set = new NormalizedKeymap(map)\n  return EditorView.domEventHandlers.of({\n    keydown(view: EditorView, event: KeyboardEvent) {\n      let handler = set.get(event)\n      return handler ? handler(view) : false\n    }\n  })\n}\n\n/// Stores a set of keybindings in normalized form, and helps looking\n/// up the binding for a keyboard event. Only needed when binding keys\n/// in some custom way.\nexport class NormalizedKeymap<T> {\n  private map: {[key: string]: T} = Object.create(null)\n\n  /// Create a normalized map.\n  constructor(map: {[key: string]: T}) {\n    for (const prop in map) this.map[normalizeKeyName(prop)] = map[prop]\n  }\n\n  /// Look up the binding for the given keyboard event, or `undefined`\n  /// if none is found.\n  get(event: KeyboardEvent): T | undefined {\n    const name = keyName(event), isChar = name.length == 1 && name != \" \"\n    const direct = this.map[modifiers(name, event, !isChar)]\n    if (direct) return direct\n    let baseName\n    if (isChar && (event.shiftKey || event.altKey || event.metaKey) &&\n        (baseName = base[event.keyCode]) && baseName != name) {\n      const fromCode = this.map[modifiers(baseName, event, true)]\n      if (fromCode) return fromCode\n    }\n    return undefined\n  }\n}\n"],"names":[],"mappings":"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"}