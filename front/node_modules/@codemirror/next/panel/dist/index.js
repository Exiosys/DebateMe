'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var view = require('../../view');
var state = require('../../state');

/// Enables the panel-managing extension.
function panels() { return [panelPlugin, baseTheme]; }
/// Opening a panel is done by providing an object describing the
/// panel through this facet.
const showPanel = state.Facet.define();
const panelPlugin = view.ViewPlugin.fromClass(class {
    constructor(view) {
        this.specs = view.state.facet(showPanel);
        this.panels = this.specs.map(spec => spec(view));
        this.top = new PanelGroup(view, true, this.panels.filter(p => p.top));
        this.bottom = new PanelGroup(view, false, this.panels.filter(p => !p.top));
        for (let p of this.panels) {
            p.dom.className += " " + panelClass(p);
            if (p.mount)
                p.mount();
        }
    }
    update(update) {
        let specs = update.state.facet(showPanel);
        if (specs != this.specs) {
            let panels = [], top = [], bottom = [], mount = [];
            for (let spec of specs) {
                let known = this.specs.indexOf(spec), panel;
                if (known < 0) {
                    panel = spec(update.view);
                    mount.push(panel);
                }
                else {
                    panel = this.panels[known];
                    if (panel.update)
                        panel.update(update);
                }
                panels.push(panel);
                (panel.top ? top : bottom).push(panel);
            }
            this.specs = specs;
            this.panels = panels;
            this.top.sync(top);
            this.bottom.sync(bottom);
            for (let p of mount) {
                p.dom.className += " " + panelClass(p);
                if (p.mount)
                    p.mount();
            }
        }
        else {
            for (let p of this.panels)
                if (p.update)
                    p.update(update);
        }
    }
}).provide(view.PluginField.scrollMargins, value => ({ top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() }));
function panelClass(panel) {
    return view.themeClass(panel.style ? `panel.${panel.style}` : "panel");
}
class PanelGroup {
    constructor(view, top, panels) {
        this.view = view;
        this.top = top;
        this.panels = panels;
        this.dom = null;
        this.syncDOM();
    }
    sync(panels) {
        this.panels = panels;
        this.syncDOM();
    }
    syncDOM() {
        if (this.panels.length == 0) {
            if (this.dom) {
                this.dom.remove();
                this.dom = null;
            }
            return;
        }
        if (!this.dom) {
            this.dom = document.createElement("div");
            this.dom.className = view.themeClass(this.top ? "panels.top" : "panels.bottom");
            this.dom.style[this.top ? "top" : "bottom"] = "0";
            this.view.dom.insertBefore(this.dom, this.top ? this.view.dom.firstChild : null);
        }
        let curDOM = this.dom.firstChild;
        for (let panel of this.panels) {
            if (panel.dom.parentNode == this.dom) {
                while (curDOM != panel.dom)
                    curDOM = rm(curDOM);
                curDOM = curDOM.nextSibling;
            }
            else {
                this.dom.insertBefore(panel.dom, curDOM);
            }
        }
        while (curDOM)
            curDOM = rm(curDOM);
    }
    scrollMargin() {
        return !this.dom ? 0 : Math.max(0, this.top
            ? this.dom.getBoundingClientRect().bottom - this.view.scrollDOM.getBoundingClientRect().top
            : this.view.scrollDOM.getBoundingClientRect().bottom - this.dom.getBoundingClientRect().top);
    }
}
function rm(node) {
    let next = node.nextSibling;
    node.remove();
    return next;
}
const baseTheme = view.EditorView.baseTheme({
    panels: {
        background: "#f5f5f5",
        boxSizing: "border-box",
        position: "sticky",
        left: 0,
        right: 0
    },
    "panels.top": {
        borderBottom: "1px solid silver"
    },
    "panels.bottom": {
        borderTop: "1px solid silver"
    }
});

exports.panels = panels;
exports.showPanel = showPanel;
