import { Mapping } from "./change";
import { EditorState } from "./state";
import { Text } from "../../text";
export declare class SelectionRange {
    readonly anchor: number;
    readonly head: number;
    constructor(anchor: number, head?: number);
    get from(): number;
    get to(): number;
    get empty(): boolean;
    map(mapping: Mapping): SelectionRange;
    extend(from: number, to?: number): SelectionRange;
    eq(other: SelectionRange): boolean;
    toJSON(): any;
    static fromJSON(json: any): SelectionRange;
    static groupAt(state: EditorState, pos: number, bias?: 1 | -1): SelectionRange;
}
export declare class EditorSelection {
    readonly ranges: readonly SelectionRange[];
    readonly primaryIndex: number;
    constructor(ranges: readonly SelectionRange[], primaryIndex?: number);
    map(mapping: Mapping): EditorSelection;
    eq(other: EditorSelection): boolean;
    get primary(): SelectionRange;
    asSingle(): EditorSelection;
    addRange(range: SelectionRange, primary?: boolean): EditorSelection;
    replaceRange(range: SelectionRange, which?: number): EditorSelection;
    toJSON(): any;
    static fromJSON(json: any): EditorSelection;
    static single(anchor: number, head?: number): EditorSelection;
    static create(ranges: readonly SelectionRange[], primaryIndex?: number): EditorSelection;
}
export declare function checkSelection(selection: EditorSelection, doc: Text): void;
//# sourceMappingURL=selection.d.ts.map