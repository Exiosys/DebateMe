import { EditorState } from "./state";
import { Transaction } from "./transaction";
import { Facet } from "./facet";
import { Tree, NodeType, NodeProp } from "lezer-tree";
export declare type StateCommand = (target: {
    state: EditorState;
    dispatch: (transaction: Transaction) => void;
}) => boolean;
export declare const allowMultipleSelections: Facet<boolean, boolean>;
export declare class Annotation<T> {
    id: number;
    private constructor();
    static define<T>(): Annotation<T>;
}
export declare const languageData: NodeProp<{}>;
export interface Syntax {
    getTree(state: EditorState): Tree;
    parsePos(state: EditorState): number;
    ensureTree(state: EditorState, upto: number, timeout?: number): Tree | null;
    docNodeType: NodeType;
    languageDataAt<Interface = any>(state: EditorState, pos: number): Interface;
}
//# sourceMappingURL=extension.d.ts.map