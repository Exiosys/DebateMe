import { Text } from "../../text";
import { Annotation } from "./extension";
import { EditorState } from "./state";
import { EditorSelection, SelectionRange } from "./selection";
import { Change, ChangeSet } from "./change";
import { Extension, ExtensionGroup } from "./facet";
export declare class Transaction {
    readonly startState: EditorState;
    changes: ChangeSet;
    docs: Text[];
    selection: EditorSelection;
    private _annotations;
    private flags;
    reconfigureData: {
        base: Extension;
        replaced: Map<ExtensionGroup, Extension>;
    } | null;
    private state;
    constructor(startState: EditorState, time?: number);
    get doc(): Text;
    annotate<T>(annotation: Annotation<T>, value: T): Transaction;
    annotation<T>(annotation: Annotation<T>): T | undefined;
    change(change: Change, mirror?: number): Transaction;
    get docChanged(): boolean;
    replace(from: number, to: number, text: string | readonly string[]): Transaction;
    replaceSelection(text: string | readonly string[]): Transaction;
    forEachRange(f: (range: SelectionRange, tr: Transaction) => SelectionRange): Transaction;
    setSelection(selection: EditorSelection): Transaction;
    get selectionSet(): boolean;
    scrollIntoView(): Transaction;
    get scrolledIntoView(): boolean;
    replaceExtension(group: ExtensionGroup, content: Extension): this;
    reconfigure(extension: Extension): this;
    get reconfigured(): boolean;
    private ensureOpen;
    apply(): EditorState;
    invertedChanges(): ChangeSet<Change>;
    static time: Annotation<number>;
    static preserveGoalColumn: Annotation<boolean>;
    static userEvent: Annotation<string>;
    static addToHistory: Annotation<boolean>;
}
//# sourceMappingURL=transaction.d.ts.map